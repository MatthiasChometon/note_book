{"version":3,"sources":["../../src/controllers/authController.js"],"names":["User","mongoose","model","UserSchema","bcrypt","require","jwt","authService","AuthService","refreshTokens","register","req","res","newUser","body","password","salt","genSalt","hash","save","err","user","send","status","json","login","email","findOne","validPassword","compare","error","user_token","accessToken","generateAccessToken","refreshToken","sign","process","env","REFRESH_TOKEN_SECRET","push"],"mappings":";;;;;;;AAAA;;;;AACA;;AAMA;;;;AALA,MAAMA,OAAOC,mBAASC,KAAT,CAAe,MAAf,EAAuBC,qBAAvB,CAAb;;AAEA,MAAMC,SAASC,QAAQ,QAAR,CAAf;AACA,MAAMC,MAAMD,QAAQ,cAAR,CAAZ;;AAGA,MAAME,cAAc,IAAIC,wBAAJ,EAApB;;AAEA,IAAIC,gBAAgB,EAApB;AACO,MAAMC,8BAAW,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACxC;AACA,QAAIC,UAAU,IAAIb,IAAJ,CAASW,IAAIG,IAAb,CAAd;;AAEA,QAAIH,IAAIG,IAAJ,CAASC,QAAb,EAAuB;AACnB;AACA,cAAMC,OAAO,MAAMZ,OAAOa,OAAP,CAAe,EAAf,CAAnB;AACA;AACAJ,gBAAQE,QAAR,GAAmB,MAAMX,OAAOc,IAAP,CAAYL,QAAQE,QAApB,EAA8BC,IAA9B,CAAzB;AACH;;AAED;AACAH,YAAQM,IAAR,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAe;AACxB,YAAID,GAAJ,EAAS,OAAOR,IAAIU,IAAJ,CAASF,GAAT,CAAP;AACT,eAAOR,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,IAArB,CAAP;AACH,KAHD;AAIH,CAhBM;;AAkBA,MAAMI,wBAAQ,CAACd,GAAD,EAAMC,GAAN,KAAc;AAC/B;AACA,QAAG,CAACD,IAAIG,IAAJ,CAASY,KAAb,EAAoBd,IAAIU,IAAJ,CAAS,kBAAT;AACpB,QAAG,CAACX,IAAIG,IAAJ,CAASC,QAAb,EAAuBH,IAAIU,IAAJ,CAAS,qBAAT;AACvB;AACAtB,SAAK2B,OAAL,CAAa,EAAED,OAAOf,IAAIG,IAAJ,CAASY,KAAlB,EAAb,EAAwC,OAAON,GAAP,EAAYC,IAAZ,KAAqB;AACzD,YAAID,GAAJ,EAAS,OAAOR,IAAIY,IAAJ,CAASJ,GAAT,CAAP;AACT,YAAIC,QAAQ,IAAZ,EAAkBT,IAAIU,IAAJ,CAAS,qBAAT;;AAElB;AACA,cAAMM,gBAAgB,MAAMxB,OAAOyB,OAAP,CAAelB,IAAIG,IAAJ,CAASC,QAAxB,EAAkCM,KAAKN,QAAvC,CAA5B;AACA,YAAI,CAACa,aAAL,EAAoB,OAAOhB,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEM,OAAO,kBAAT,EAArB,CAAP;;AAEpB,cAAMC,aAAa,EAAEL,OAAOf,IAAIG,IAAJ,CAASY,KAAlB,EAAyBX,UAAUJ,IAAIG,IAAJ,CAASC,QAA5C,EAAnB;AACA,cAAMiB,cAAczB,YAAY0B,mBAAZ,CAAgCF,UAAhC,CAApB;AACA,cAAMG,eAAe5B,IAAI6B,IAAJ,CAASJ,UAAT,EAAqBK,QAAQC,GAAR,CAAYC,oBAAjC,CAArB;AACA7B,sBAAc8B,IAAd,CAAmBL,YAAnB;AACA,eAAOtB,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEQ,aAAaA,WAAf,EAA4BE,cAAcA,YAA1C,EAAwDb,MAAMA,IAA9D,EAArB,CAAP;AACH,KAbD;AAcH,CAnBM","file":"authController.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { UserSchema } from '../models/userModel';\r\nconst User = mongoose.model('User', UserSchema);\r\n\r\nconst bcrypt = require(\"bcrypt\");\r\nconst jwt = require('jsonwebtoken')\r\n\r\nimport { AuthService } from '../services/authService'\r\nconst authService = new AuthService()\r\n\r\nlet refreshTokens = []\r\nexport const register = async (req, res) => {\r\n    // create new user with body\r\n    let newUser = new User(req.body);\r\n\r\n    if (req.body.password) {\r\n        // generate salt to hash password\r\n        const salt = await bcrypt.genSalt(10);\r\n        // now we set user password to hashed password\r\n        newUser.password = await bcrypt.hash(newUser.password, salt);\r\n    }\r\n\r\n    // try to save the user\r\n    newUser.save((err, user) => {\r\n        if (err) return res.send(err);\r\n        return res.status(200).json(user);\r\n    });\r\n};\r\n\r\nexport const login = (req, res) => {\r\n    // Test if body is not empty\r\n    if(!req.body.email) res.send(\"no email entered\")\r\n    if(!req.body.password) res.send(\"no password entered\")\r\n    // Test if user exist\r\n    User.findOne({ email: req.body.email }, async (err, user) => {\r\n        if (err) return res.json(err)\r\n        if (user == null) res.send(\"this user not exist\")\r\n\r\n        // check user password with hashed password stored in the database\r\n        const validPassword = await bcrypt.compare(req.body.password, user.password);\r\n        if (!validPassword) return res.status(400).json({ error: \"Invalid Password\" });\r\n\r\n        const user_token = { email: req.body.email, password: req.body.password }\r\n        const accessToken = authService.generateAccessToken(user_token)\r\n        const refreshToken = jwt.sign(user_token, process.env.REFRESH_TOKEN_SECRET)\r\n        refreshTokens.push(refreshToken)\r\n        return res.status(200).json({ accessToken: accessToken, refreshToken: refreshToken, user: user })\r\n    });\r\n}\r\n"]}